import type { NextApiRequest, NextApiResponse } from "next";
import fs from "fs";
import { baseURL, fetcher, patcher, poster } from "../../../utils/api";
import FormData from "form-data";
import formidable from "formidable";
import IncomingForm from "formidable/Formidable";
export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  let file;
  if (req.method !== "POST") {
    res.status(405).json("Method not allowed");
  } else {
    console.log(req.body);
    const data = await new Promise((resolve, reject) => {
      const form = formidable({});
      form.parse(req, (err: any, fields: any, files: formidable.Files) => {
        if (err) reject({ err });
        resolve({ err, fields, files });
      });
    });

    const files = data.files as formidable.File;
    console.log(data.fields);

    const formdata = new FormData();
    formdata.append("linkedin", data.fields.linkedin);
    formdata.append("portfolio_url", data.fields.portfolio_url);
    const t = fs.createReadStream("/home/rin-chan/Documents/CS/lily/public/test.txt");
    console.log(t.read());
    formdata.append("cv", fs.createReadStream("/public/test.pdf"), "test.pdf");
    console.log(formdata);
    try {
      const result = await fetch(baseURL("api/profile/jobfair/"), {
        body: formdata as unknown as BodyInit,
        headers: {
          Authorization: req.headers.authorization ?? "",
        },
        method: "PATCH",
      });

      if (result.ok) {
        console.log("ok");
        const message = await result.json();
        console.log(message);
        res.status(200).json({ message: "Success!" });
      } else {
        console.log("not ok");
        const message = await result.json();
        console.log(message);
        res.status(500).json({ message: message.detail ?? "unknown error" });
      }
    } catch (error) {
      console.log(error);
      res.status(500).json({ message: error });
    }
  }
}
